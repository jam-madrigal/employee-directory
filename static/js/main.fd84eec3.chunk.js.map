{"version":3,"sources":["components/Row/Row.js","components/TableHeader/TableHeader.js","utils/API.js","App.js","index.js"],"names":["Row","props","employees","map","employee","src","picture","thumbnail","alt","name","first","last","gender","location","city","state","email","login","uuid","TableHead","axios","get","tableStyles","margin","fontSize","minWidth","borderRadius","overflow","boxShadow","App","onchange","e","setState","search","target","value","console","log","sortType","API","then","res","data","results","filteredEmployees","this","filter","toLowerCase","indexOf","sort","a","b","toString","localeCompare","className","style","marginTop","type","placeholder","onChange","backgroundColor","marginRight","onClick","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAqBeA,MAlBf,SAAaC,GAEX,OAGEA,EAAMC,UAAUC,KAAI,SAACC,GACrB,OACA,+BACI,+BAAI,qBAAKC,IAAKD,EAASE,QAAQC,UAAWC,IAAI,aAA9C,IAA4DJ,EAASK,KAAKC,MAA1E,IAAkFN,EAASK,KAAKE,QAChG,6BAAKP,EAASQ,SACd,+BAAKR,EAASS,SAASC,KAAvB,KAA+BV,EAASS,SAASE,SACjD,6BAAKX,EAASY,UAJTZ,EAASa,MAAMC,U,MCMbC,MAdf,SAAmBlB,GAEjB,OACM,gCACI,+BACI,2CACA,wCACA,4CACA,6C,iBCTD,EAEH,WACR,OAAOmB,IAAMC,IAAI,gDCEfC,EAAc,CAClBC,OAAQ,SACRC,SAAU,QACVC,SAAU,QACVC,aAAc,gBACdC,SAAU,SACVC,UAAW,gCAuFEC,E,kDAjFf,aAAe,IAAD,8BACZ,gBAiBFC,SAAW,SAAAC,GACT,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,QACjCC,QAAQC,IAAI,EAAKtB,MAAMkB,SAlBvB,EAAKlB,MAAQ,CACXb,UAAW,GACX+B,OAAQ,GACRK,SAAU,IALA,E,gEASO,IAAD,OAClBC,IAAeC,MAAK,SAACC,GACnB,EAAKT,SAAS,CACZ9B,UAAWuC,EAAIC,KAAKC,e,+BAahB,IAAD,OAGDC,EAAoBC,KAAK9B,MAAMb,UAAU4C,QAAQ,SAAC1C,GACtD,OAAmF,IAA5EA,EAASQ,OAAOmC,cAAcC,QAAQ,EAAKjC,MAAMkB,OAAOc,iBACiB,IAAhF3C,EAASK,KAAKC,MAAMqC,cAAcC,QAAQ,EAAKjC,MAAMkB,OAAOc,iBACmB,IAA/E3C,EAASK,KAAKE,KAAKoC,cAAcC,QAAQ,EAAKjC,MAAMkB,OAAOc,iBACwB,IAAnF3C,EAASS,SAASC,KAAKiC,cAAcC,QAAQ,EAAKjC,MAAMkB,OAAOc,iBACqB,IAApF3C,EAASS,SAASE,MAAMgC,cAAcC,QAAQ,EAAKjC,MAAMkB,OAAOc,iBACW,IAA3E3C,EAASY,MAAM+B,cAAcC,QAAQ,EAAKjC,MAAMkB,OAAOc,kBAElDT,EAAYO,KAAK9B,MAAjBuB,SAEQM,EAAkBK,MAAM,SAACC,EAAGC,GAEzC,OADiC,QAAbb,EAAsB,GAAK,GAC3BY,EAAEzC,KAAKE,KAAKyC,WAAWC,cAAcF,EAAE1C,KAAKE,KAAKyC,eAGvE,OAOE,cALA,CAKA,OAAKE,UAAU,YAAf,UAEE,qBAAKA,UAAU,MAAf,SACE,uBAAOC,MAAO,CAACC,UAAW,QAASC,KAAK,OAAOH,UAAU,MAAMI,YAAY,yBAAyBC,SAAUd,KAAKf,aAIrH,qBAAKwB,UAAU,MAAf,SACE,wBAAOA,UAAU,SAASC,MAAOjC,EAAjC,UACA,cAAC,EAAD,IACE,gCACA,cAAC,EAAD,CAAKpB,UAAW0C,WAOpB,qBAAKU,UAAU,MAAf,SACE,sBAAKA,UAAU,MAAf,UACI,wBAAQA,UAAU,kBAAkBC,MAAO,CAACK,gBAAiB,SAAUC,YAAa,QAASC,QAAS,kBAAM,EAAK9B,SAAS,CAACM,SAAU,SAArI,oCACA,wBAAQgB,UAAU,kBAAkBC,MAAO,CAACK,gBAAiB,UAAWE,QAAS,kBAAM,EAAK9B,SAAS,CAACM,SAAU,UAAhH,iD,GA1EMyB,IAAMC,W,MCTxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fd84eec3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Row(props) {\r\n\r\n  return (\r\n\r\n    // A map() here  iterates through the array of employees and generates a row with the props in their corresponding columns\r\n    props.employees.map((employee) => {\r\n    return (\r\n    <tr key={employee.login.uuid}>\r\n        <td><img src={employee.picture.thumbnail} alt=\"employee\"/> {employee.name.first} {employee.name.last}</td>\r\n        <td>{employee.gender}</td>\r\n        <td>{employee.location.city}, {employee.location.state}</td>\r\n        <td>{employee.email}</td>\r\n        \r\n    </tr>)\r\n    })\r\n  )\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nfunction TableHead(props) {\r\n  \r\n  return (\r\n        <thead>\r\n            <tr>\r\n                <th>Full name</th>\r\n                <th>Gender</th>\r\n                <th>City/State</th>\r\n                <th>Email</th>\r\n            </tr>\r\n        </thead>\r\n  );\r\n}\r\n\r\nexport default TableHead;\r\n","import axios from 'axios';\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n    return axios.get('https://randomuser.me/api/?results=5&nat=us');\r\n  }\r\n};","import React from 'react';\nimport Row from './components/Row/Row'\nimport TableHead from './components/TableHeader/TableHeader'\nimport API from './utils/API';\n\n// Styles to be used for the table div\nconst tableStyles = {\n  margin: '25px 0', \n  fontSize: '0.9em', \n  minWidth: '400px', \n  borderRadius: '10px 10px 0 0', \n  overflow: 'hidden', \n  boxShadow: '0 0 20px rgba(0, 0, 0, 0.15)'\n}\n\nclass App extends React.Component {\n\n// Setting the initial state that can then hold the employees data from the api call, to be passed as props\nconstructor() {\n  super() \n  this.state = {\n    employees: [],\n    search: \"\",\n    sortType: \"\"\n  }\n}\n  // API call that, when the component successfully mounts, pushes the data into the state\ncomponentDidMount() {\n  API.getUsers().then((res) => {\n    this.setState({\n      employees: res.data.results\n    })\n  })\n}\n\n// When the search bar receives input\nonchange = e => {\n  this.setState({ search: e.target.value });\n  console.log(this.state.search);\n\n}\n\n\nrender() {\n\n  // Filtering the table and re-rendering it based on search input, spanning every row visible row prop (name, gender, etc.)\n  const filteredEmployees = this.state.employees.filter( (employee) => {\n    return employee.gender.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1 ||\n    employee.name.first.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1 ||\n    employee.name.last.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1 ||\n    employee.location.city.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1 ||\n    employee.location.state.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1 ||\n    employee.email.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1\n  });\n  const {sortType} = this.state;\n\n  const sorted = filteredEmployees.sort( (a, b) => {\n    const isReversed = (sortType === \"asc\") ? 1 : -1;\n    return isReversed * a.name.last.toString().localeCompare(b.name.last.toString())\n  });\n\n  return (\n\n    // There needs to be a top page banner here with the title of the app\n\n    // Create clickable buttons on the table headers that sort the table by that header, either ascending or descending on click \n\n// The html that gets rendered\n    <div className=\"container\">\n      {/* Search bar */}\n      <div className=\"row\">\n        <input style={{marginTop: '15px'}} type=\"text\" className=\"col\" placeholder=\"Search for an employee\" onChange={this.onchange}/>\n      </div>\n\n      {/* Table */}\n      <div className=\"row\">\n        <table className=\"col-sm\" style={tableStyles}>\n        <TableHead />\n          <tbody>\n          <Row employees={filteredEmployees}/>\n\n          </tbody>\n        </table>\n        \n      </div>\n      {/* Buttons to sort by last name */}\n      <div className=\"row\">\n        <div className=\"col\">\n            <button className=\"btn btn-primary\" style={{backgroundColor: 'purple', marginRight: \"10px\"}} onClick={() => this.setState({sortType: 'asc'})}>Sort by last name asc.</button>\n            <button className=\"btn btn-primary\" style={{backgroundColor: 'purple'}} onClick={() => this.setState({sortType: 'desc'})}>Sort by last name desc.</button>\n        </div>\n      </div>\n\n      \n    </div>\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}